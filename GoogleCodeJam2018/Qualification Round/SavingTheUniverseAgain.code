import java.util.*;
import java.io.*;

public class Solution {
	public static void main(String[] args) {

		Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		int t = in.nextInt();
		int n;

		String md, result;
		for (int i = 1; i <= t; i++) {
			n = in.nextInt();
			md = in.next();

			result = solver(n, md);
			System.out.println("Case #" + i + ": " + result);
		}
	}

	static String solver(int n, String md) {
		int ans = 0, power = 1;
		String[] cmd = md.split("");
		int[] damage = calcDamage(cmd);

		// System.out.print(damage[damage.length-1]+" ");

		if (damage[damage.length - 1] <= n)
			return Integer.toString(0);
		int ind2 = damage.length - 1, ind1, end;
		String gr;
		ind1 = ind2;
		while (damage[damage.length - 1] > n && ind2 > -1) {

			while (ind2 > -1) {
				if (cmd[ind2].equals("S"))
					break;
				ind2--;
			}
			ind1=ind2-1;
			while (ind1 > -1) {
				if (cmd[ind1].equals("C"))
					break;
				ind1--;
			}
			if(ind1==-1||ind2==-1){
			    	return "IMPOSSIBLE";
			}
			ind1++;
			while (ind1 <=ind2) {
				if (cmd[ind1].equals("C")) {

					ind1++;
					continue;
				}
				gr = cmd[ind1];
				cmd[ind1] = cmd[ind1 - 1];
				cmd[ind1 - 1] = gr;
				ans++;
				damage = calcDamage(cmd);
				if (damage[damage.length - 1] <= n) {
					return Integer.toString(ans);
				}
				ind1++;
			}

		}

		return "IMPOSSIBLE";

	}

	static int[] calcDamage(String[] cmd) {
		int[] damage = new int[cmd.length];
		int power = 1;
		String md;
		if (cmd[0].equals("C")) {
			power *= 2;
		} else {
			damage[0] = 1;
		}
		for (int i = 1; i < cmd.length; i++) {
			md = cmd[i];
			if (md.equals("C")) {
				power *= 2;
				damage[i] = damage[i - 1];
			} else {
				// System.out.print("S");
				damage[i] = damage[i - 1] + power;
			}
		}
		return damage;
	}
}
