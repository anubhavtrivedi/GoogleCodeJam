import java.util.*;
import java.io.*;

public class Solution {
	public static void main(String[] args) {

		Scanner in = new Scanner(new BufferedReader(new InputStreamReader(System.in)));
		int t = in.nextInt();
		int n,ans=0;
		int[] arr1;
		boolean works=true;
		String md, result;
		for (int i = 1; i <= t; i++) {
			works=true;
			n = in.nextInt();
			int[] arr = new int[n];
			if(n%2==0)
				arr1 = new int[(n/2)];
			else
				 arr1 = new int[(n/2)+1];
			int[] arr2 = new int[n/2];
			int top1=0,top2=0;
			for (int j = 0; j < n; j++) {
				if ((j + 1) % 2 != 0) {
					arr1[top1] = in.nextInt();
					top1++;
				}
				else {
					arr2[top2] = in.nextInt();
					top2++;
				}
			}
			sort(arr1, 0, arr1.length-1);
			sort(arr2, 0, arr2.length-1);
			top1=0;top2=0;
			for(int k=0;k<n;k++) {
				if ((k + 1) % 2 != 0) {
					arr[k]=arr1[top1];
					top1++;
				}
				else {
					arr[k]=arr2[top2] ;
					top2++;
				}
			}
			for(int k=0;k<n-1;k++) {
				if(arr[k]>arr[k+1]) {
					ans=k;
					works=false;
					break;
				}
			}
			if(works)
			System.out.println("Case #" + i + ": ok");
			else
				System.out.println("Case #" + i + ": " + ans);
		}
	}



	// ob.sort(arr, 0, arr.length-1);

	static void merge(int arr[], int l, int m, int r) {
		// Find sizes of two subarrays to be merged
		int n1 = m - l + 1;
		int n2 = r - m;

		/* Create temp arrays */
		int L[] = new int[n1];
		int R[] = new int[n2];

		/* Copy data to temp arrays */
		for (int i = 0; i < n1; ++i)
			L[i] = arr[l + i];
		for (int j = 0; j < n2; ++j)
			R[j] = arr[m + 1 + j];

		/* Merge the temp arrays */

		// Initial indexes of first and second subarrays
		int i = 0, j = 0;

		// Initial index of merged subarry array
		int k = l;
		while (i < n1 && j < n2) {
			if (L[i] <= R[j]) {
				arr[k] = L[i];
				i++;
			} else {
				arr[k] = R[j];
				j++;
			}
			k++;
		}

		/* Copy remaining elements of L[] if any */
		while (i < n1) {
			arr[k] = L[i];
			i++;
			k++;
		}

		/* Copy remaining elements of R[] if any */
		while (j < n2) {
			arr[k] = R[j];
			j++;
			k++;
		}
	}

	// Main function that sorts arr[l..r] using
	// merge()
	static void sort(int arr[], int l, int r) {
		if (l < r) {
			// Find the middle point
			int m = (l + r) / 2;

			// Sort first and second halves
			sort(arr, l, m);
			sort(arr, m + 1, r);

			// Merge the sorted halves
			merge(arr, l, m, r);
		}

	}
}
